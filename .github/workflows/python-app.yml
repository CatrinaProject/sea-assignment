
name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
    build:
  
      runs-on: ubuntu-latest
  
      steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    run-tests:
      runs-on: ubuntu-latest
      needs: [build]
      
      steps:
        - uses: actions/checkout@v3
        - name: Set up Python 3.10
          uses: actions/setup-python@v3
          with:
            python-version: "3.10"
        - name: Test with pytest
          run: |
            pip install pytest
            pip install flask
            pytest
    
    build-and-push-docker-image:
          runs-on: ubuntu-latest
          needs: [build, run-tests]
          steps:
            - name: Build and Push Docker Image
              uses: docker/build-push-action@v5
              with:
                file: ./Dockerfile
                image: catrinaproject/sedevopsapp
                registry: docker.io
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PASSWORD }}
    deploy-to-render:
      runs-on: ubuntu-latest
      needs: [build, run-tests, build-and-push-docker-image]
      steps:
        - name: Deploy to production
          uses: johnbeynon/render-deploy-action@v0.0.8
          with:
            service-id: ${{ secrets.RENDER_SERVICE_ID }}
            api-key: ${{ secrets.RENDER_API_KEY }}
            wait-for-success: true
